// Numbers

#Numbers {
  .Numbers-list {
    li {
      &:first-child {
        font-weight: 700;
        font-size: 32px;
      }
      &:nth-child(2) {
        font-size: 32.5px;
        border: 2.5px solid red;
      }
      &:nth-child(3) {
        font-size: 18px;
        border: 2.8px solid blue;
        border-radius: 20%;
        padding-top: 25%;
      }
      &:nth-child(4) {
        font-size: 32.9px;
        border: 0.3em dotted #831483;
        span {
          &:first-child {
            font-size: 2em;
            font-weight: 700;
          }
          &:last-child {
            font-weight: 900;
            font-size: 3.1rem;
          }
        }
      }
    }
  }
}

// Strings
// Normal Strings
$string-1: 'Helvetica';
$string-2: 'Time New Roman';

// Escapes "\"
$string-3: bold;
$string-4: $string-1 + 'sans-serif';

#Strings {
  .Strings-list {
    font-size: 1.1rem;
    li {
      &:first-child {
        font-family: $string-1;
      }
      &:nth-child(2) {
        font-family: $string-2;
      }
      &:nth-child(3) {
        font-family: $string-1;
        font-weight: $string-3;
      }
      &:last-child {
        span {
          &:first-child {
            font-family: $string-4;
          }
          &:last-child {
            font-family: sans-serif;
          }
        }
      }
    }
  }
}

// Maps

$blue-color-map: (
  'light': lightblue,
  'medium': blue,
  'hard': darkblue
);

$background-color-map: (
    'bg-light': pink,
    'bg-medium': red,
    'bg-hard': darkred
);

$bg_and_text_color-map: map-merge($blue-color-map, $background-color-map);

.Maps-list {
  .list-item {
    font-size: 1.5rem;
    &:first-child {
      color: map-get($blue-color-map, medium);
    }
    &:nth-child(2){
        color: map-get($blue-color-map, hard);
    }
    &:nth-child(3){
        color: map-get($blue-color-map, light);
    }
    &:nth-child(4){
        background-color: map-get($background-color-map, bg-medium);
        color: map-get($bg_and_text_color-map, light);
    }
    &:nth-child(5){
        background-color: map-get($background-color-map, bg-hard);
        color: map-get($bg_and_text_color-map, bg-light);
    }
  }
}

// Booleans

@mixin avatar($size, $circle: true) {
    width: $size;
    height: $size;
    @if $circle {
        border-radius: $size / 2;
    }
}

.square {
    background-color: red;
    @include avatar(150px, false)
}

.circle {
    background-color: blue;
    @include avatar(150px)
}

// Null 
$variable: null;
$color: red;

.container{
    color: lighten($color, 20%)
}